import Mathlib.Tactic.Use
import Mathlib.Tactic.Basic
import Mathlib.Tactic.LeftRight
import Mathlib.Tactic.Linarith
import Mathlib.Tactic.Contrapose
import Mathlib.Tactic.NthRewrite
import Mathlib.Init.Function
import Mathlib.Init.Set
import Mathlib.Logic.Equiv.Defs
import Mathlib.Data.Fintype.Basic
import Mathlib.Data.Finset.Basic
import Mathlib.Data.Finset.Image
import Mathlib.Data.Finset.Card


-- Main source : http://users.cecs.anu.edu.au/~bdm/papers/hypercubes.pdf


/- 
Define latin hypercubes as a set of functions from Fin d to Fin n
latin is defined as in for any line in [n]·µà‚Å∫¬π, there is a unique point in A on that line
NOTE : contrary to the convention, we use 0-indexing here 
and the entry of a point is the 0th coordinate
-/

def is_LatinHypercube {n d : Nat} (A : Set (Fin d ‚Üí Fin n)) : Prop := 
  if H0 : n > 0 ‚àß d > 1 then 
    ‚àÄ f : Fin d ‚Üí Fin n, ‚àÄ x : Fin d, ‚àÉ! a : Fin d ‚Üí Fin n, a ‚àà A ‚àß
      ‚àÄ y : Fin d, x ‚â† y ‚Üí a y = f y 
  else 
    False


structure LatinHypercube (n d : Nat) :=
  (H0 : n > 0 ‚àß d > 1)
  (set : Set (Fin d ‚Üí Fin n))
  (prop : is_LatinHypercube set)

-- def ùìó (n d : Nat) := {_ : LatinHypercube n d}

-- Define Isotopism class
def Blindisotopism {n d : Nat} (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) (A : Set (Fin d ‚Üí Fin n)) : 
  Set (Fin d ‚Üí Fin n) := {b : Fin d ‚Üí Fin n | ‚àÉ a ‚àà A, b = (Œª x => œÉ‚Çôd x (a x))}

lemma Blindisotopism.main_imp {n d : Nat} (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) :
  ‚àÄ A : Set (Fin d ‚Üí Fin n), is_LatinHypercube A ‚Üí is_LatinHypercube (Blindisotopism œÉ‚Çôd A) := by
  intro A
  unfold is_LatinHypercube
  simp only [gt_iff_lt, ne_eq, dite_eq_ite]

  by_cases H0 : n > 0 ‚àß d > 1 <;> simp only [H0, if_true, if_false] ; clear H0
  ¬∑ -- 1.
    rintro HA f x
    specialize HA (Œª x => (œÉ‚Çôd x).symm (f x)) x
    rcases HA with ‚ü®a', ha'1, ha'2‚ü©
    use Œª x => œÉ‚Çôd x (a' x)
    constructor <;> simp only [Blindisotopism, and_imp]
    ¬∑ -- 1.
      refine ‚ü® ‚ü® a', ha'1.1, rfl ‚ü©, ?_ ‚ü© ; clear ha'2
      rintro y' hy'
      rw [ha'1.2 y' hy', Equiv.apply_symm_apply]
      done
    ¬∑ -- 2.
      rintro _ ‚ü®a2, ha2, rfl‚ü© ha1f ; clear ha'1
      suffices h : a2 = a' by rw [h]
      apply ha'2 _ ‚ü® ha2, ?_ ‚ü© ; clear ha'2 a' ha2 A
      rintro y' hy'
      rw [‚Üê (ha1f y' hy'), Equiv.symm_apply_apply]
  done

theorem Blindisotopism.main {n d : Nat} (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) (A : Set (Fin d ‚Üí Fin n)) :
  is_LatinHypercube A ‚Üî is_LatinHypercube (Blindisotopism œÉ‚Çôd A) := by
  refine ‚ü® Blindisotopism.main_imp œÉ‚Çôd A, ?_ ‚ü©
  rintro HA
  have HA' := Blindisotopism.main_imp (Œª x => (œÉ‚Çôd x).symm) (Blindisotopism œÉ‚Çôd A) HA ; clear HA
  suffices H : Blindisotopism (fun x => (œÉ‚Çôd x).symm) (Blindisotopism œÉ‚Çôd A) = A by rw [‚Üê H] ; exact HA'
  ext f ; clear HA'
  constructor
  ¬∑ -- 1.
    rintro ‚ü®a, ‚ü® f, hf, rfl ‚ü©, rfl‚ü©
    simp only [Equiv.symm_apply_apply]
    exact hf
  ¬∑ -- 2.
    rintro hf
    refine ‚ü® Œª x => (œÉ‚Çôd x) (f x), ‚ü® f, hf, rfl ‚ü©, ?_ ‚ü©
    simp only [Equiv.symm_apply_apply]
  done

lemma Blindisotopism.closed_under_comp {n d : Nat} (œÉ‚Çôd1 œÉ‚Çôd2 : Fin d ‚Üí Fin n ‚âÉ Fin n) (A : Set (Fin d ‚Üí Fin n) ) :
  Blindisotopism œÉ‚Çôd1 (Blindisotopism œÉ‚Çôd2 A) = Blindisotopism (Œª x => Equiv.trans (œÉ‚Çôd2 x) (œÉ‚Çôd1 x)) A := by
  unfold Blindisotopism Equiv.trans
  simp only [Set.mem_setOf_eq, Equiv.coe_fn_mk]
  ext
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® a, ha, rfl ‚ü©, rfl‚ü©
    exact ‚ü® a, ha, rfl ‚ü©
  ¬∑ -- 2.
    rintro ‚ü®a, ha, rfl‚ü©
    exact ‚ü® Œª x => (œÉ‚Çôd2 x) (a x), ‚ü® a, ha, rfl ‚ü©, rfl ‚ü©
  done

lemma Blindisotopism.closed_under_inv {n d : Nat} (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) :
  Function.RightInverse (Blindisotopism œÉ‚Çôd) (Blindisotopism (Œª x => (œÉ‚Çôd x).symm)) := by
  unfold Blindisotopism Equiv.symm Function.RightInverse Function.LeftInverse
  simp only [Set.mem_setOf_eq, Equiv.invFun_as_coe, Equiv.toFun_as_coe, Equiv.coe_fn_mk]
  rintro A
  ext f
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® a, ha, rfl ‚ü©, rfl‚ü©
    simp only [Equiv.symm_apply_apply]
    exact ha
  ¬∑ -- 2.
    rintro ha
    exact ‚ü® Œª x => (œÉ‚Çôd x) (f x), ‚ü® f, ha, rfl ‚ü©, by simp only [Equiv.symm_apply_apply] ‚ü©
  done

lemma Blindisotopism.closed_under_inv1 {n d : Nat} (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) :
  Function.LeftInverse (Blindisotopism œÉ‚Çôd) (Blindisotopism (Œª x => (œÉ‚Çôd x).symm)) := by
  unfold Blindisotopism Function.LeftInverse
  simp only [Set.mem_setOf_eq, Equiv.invFun_as_coe, Equiv.toFun_as_coe, Equiv.coe_fn_mk]
  rintro A
  ext f
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® a, ha, rfl ‚ü©, rfl‚ü©
    simp only [Equiv.apply_symm_apply]
    exact ha
  ¬∑ -- 2.
    rintro ha
    use Œª x => (œÉ‚Çôd x).symm (f x)
    refine ‚ü® ‚ü® f, ha, rfl ‚ü©, by simp only [Equiv.apply_symm_apply] ‚ü©
  done

class Isotopism (n d : Nat) extends Equiv (LatinHypercube n d) (LatinHypercube n d) where
  (iso : ‚àÉ œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n, toEquiv.toFun = Œª A : (LatinHypercube n d) => 
    ‚ü® A.H0, Blindisotopism œÉ‚Çôd A.set, Blindisotopism.main_imp œÉ‚Çôd A.set A.prop ‚ü©)

@[ext] 
theorem Isotopism.ext {n d : Nat} (T1 T2 : Isotopism n d) : 
  T1.toFun = T2.toFun ‚Üí T1 = T2 := by
  intro h
  have Isotopism.ext_equiv : T1.toEquiv = T2.toEquiv ‚Üí T1 = T2 := by
    rcases T1 with ‚ü® ‚ü® f, f1, tofunf, invfunf ‚ü©, iso‚ÇÅ ‚ü©
    rcases T2 with ‚ü® ‚ü® g, g1, tofung, invfung ‚ü©, iso‚ÇÇ ‚ü© 
    simp only [Equiv.mk.injEq, and_imp]
    rintro h1 h2
    congr
    done
  apply Isotopism.ext_equiv
  ext A
  rw [‚Üê Equiv.toFun_as_coe, ‚Üê Equiv.toFun_as_coe, h]

theorem Isotopism.ext_iff {n d : Nat} (T1 T2 : Isotopism n d) : 
  T1 = T2 ‚Üî T1.toFun = T2.toFun :=  ‚ü® Œª h => h ‚ñ∏ rfl, Isotopism.ext T1 T2 ‚ü©

def Isotopism.id {n d : Nat} : Isotopism n d := 
  ‚ü® Equiv.refl (LatinHypercube n d), by use Œª _ => Equiv.refl (Fin n); unfold Blindisotopism; simp; rfl ‚ü©

def Isotopism.comp { n d : Nat} (T1 T2 : Isotopism n d) : Isotopism n d := 
  ‚ü® Equiv.trans T1.toEquiv T2.toEquiv,
    by 
      rcases T1 with ‚ü® equiv1, ‚ü® œÉ‚Çôd1, iso1 ‚ü© ‚ü©
      rcases T2 with ‚ü® equiv2, ‚ü® œÉ‚Çôd2, iso2 ‚ü© ‚ü©
      use Œª x => Equiv.trans (œÉ‚Çôd1 x) (œÉ‚Çôd2 x)
      ext A
      simp only [Equiv.trans]
      rw [Equiv.toFun_as_coe] at iso1 iso2
      rw [iso1, iso2, LatinHypercube.mk.injEq, Function.comp_apply] ; clear iso1 iso2
      simp only
      rw [Blindisotopism.closed_under_comp œÉ‚Çôd2 œÉ‚Çôd1 A.set]
      rfl
      done
  ‚ü©

def Isotopism.inverse_map {n d : Nat} (T : Isotopism n d) : Isotopism n d := 
  ‚ü® T.toEquiv.symm, by
    rcases T with ‚ü® equiv, ‚ü® œÉ‚Çôd, iso ‚ü© ‚ü©
    use Œª x => (œÉ‚Çôd x).symm
    ext A  
    apply Equiv.injective equiv
    simp only [Equiv.invFun_as_coe, Equiv.toFun_as_coe_apply, Equiv.apply_symm_apply]
    rw [Equiv.toFun_as_coe] at iso
    rw [iso, LatinHypercube.mk.injEq]
    nth_rw 1 [‚Üê Blindisotopism.closed_under_inv1 œÉ‚Çôd A.set]
    done
  ‚ü©

theorem Isotopism.LeftInverse { n d : Nat} (T : Isotopism n d) : 
Isotopism.comp (Isotopism.inverse_map T) T  = Isotopism.id := by
  unfold Isotopism.comp Isotopism.inverse_map Isotopism.id Equiv.trans Function.comp
  congr <;>
  simp only [Equiv.symm_symm, Equiv.apply_symm_apply] <;>
  rfl

instance Isotopism.Group {n d : Nat} : Group (Isotopism n d) := by
  refine'
  {
    mul := Œª T1 T2 : Isotopism n d => Isotopism.comp T1 T2
    one := Isotopism.id
    inv := Œª T : Isotopism n d => Isotopism.inverse_map T
    div := Œª T1 T2 : Isotopism n d => Isotopism.comp T1 (Isotopism.inverse_map T2)
    npow := @npowRec _ ‚ü®Isotopism.id‚ü© ‚ü®Œª T1 T2 => Isotopism.comp T1 T2‚ü©
    zpow := @zpowRec _ ‚ü®Isotopism.id‚ü© ‚ü®Œª T1 T2 => Isotopism.comp T1 T2‚ü© ‚ü®Isotopism.inverse_map‚ü©
    mul_left_inv := fun T => Isotopism.LeftInverse T
    .. } <;>
  intros <;>
  ext <;>
  rfl
  done

-------------------------------------------------------------------------------------------

def Blindconjugate {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) (A : Set (Fin d ‚Üí Fin n)) : 
  Set (Fin d ‚Üí Fin n) := {b : Fin d ‚Üí Fin n | ‚àÉ a ‚àà A, b = a ‚àò œÉ_d}

lemma Blindconjugate.main_imp {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) :
  ‚àÄ A : Set (Fin d ‚Üí Fin n), is_LatinHypercube A ‚Üí is_LatinHypercube (Blindconjugate œÉ_d A) := by
  intro A
  unfold is_LatinHypercube
  simp only [gt_iff_lt, ne_eq, dite_eq_ite]

  by_cases H0 : n > 0 ‚àß d > 1 <;> simp only [H0, if_true, if_false] ; clear H0
  intro HA f x 
  specialize HA (Œª x => f (œÉ_d.symm x)) (œÉ_d x)
  rcases HA with ‚ü®a', ha'1, ha'2‚ü©
  use Œª x => a' (œÉ_d x)
  simp only [and_imp, Blindconjugate]
  constructor
  ¬∑ -- 1.
    refine ‚ü® ‚ü® a', ha'1.1, rfl ‚ü©, ?_ ‚ü© ; clear ha'2
    rintro y' hy' 
    rw [‚Üê EmbeddingLike.apply_eq_iff_eq œÉ_d] at hy'
    rw [ha'1.2 (œÉ_d y') hy', Equiv.symm_apply_apply]
    done
  ¬∑ -- 2.
    rintro _ ‚ü®a, ha, rfl‚ü© haf ; clear ha'1
    unfold Function.comp
    suffices  h : a = a' by rw [h]
    apply ha'2 _ ‚ü® ha, ?_ ‚ü© ; clear ha'2 a' ha A
    rintro y' hy'
    specialize haf (œÉ_d.symm y') (by contrapose! hy' ; rw [hy', Equiv.apply_symm_apply])
    rw [‚Üê haf, Function.comp_apply, Equiv.apply_symm_apply]
  done

theorem Blindconjugate.main {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) (A : Set (Fin d ‚Üí Fin n)) :
  is_LatinHypercube A ‚Üî is_LatinHypercube (Blindconjugate œÉ_d A) := by
  refine ‚ü® Blindconjugate.main_imp œÉ_d A, ?_ ‚ü©
  rintro HA
  have HA' := Blindconjugate.main_imp œÉ_d.symm (Blindconjugate œÉ_d A) HA ; clear HA
  suffices H : Blindconjugate œÉ_d.symm (Blindconjugate œÉ_d A) = A by rw [‚Üê H]; exact HA'
  ext f ; clear HA'
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® f, hf, rfl ‚ü©, rfl‚ü©
    suffices H : (f ‚àò œÉ_d) ‚àò œÉ_d.symm = f by rw [H] ; exact hf
    ext
    rw [Function.comp_apply, Function.comp_apply, Equiv.apply_symm_apply]
    done
  ¬∑ -- 2.
    rintro hf
    refine ‚ü® fun x => f (œÉ_d x), ‚ü® f, hf, rfl ‚ü©, ?_ ‚ü©
    ext
    simp only [Function.comp_apply, Equiv.apply_symm_apply]
  done

lemma Blindconjugate.closed_under_comp {n d : Nat} (œÉ_d1 œÉ_d2 : Fin d ‚âÉ Fin d) (A : Set (Fin d ‚Üí Fin n) ) :
  Blindconjugate œÉ_d1 (Blindconjugate œÉ_d2 A) = Blindconjugate (Equiv.trans œÉ_d1 œÉ_d2) A := by
  unfold Blindconjugate Equiv.trans
  simp only [Set.mem_setOf_eq, Equiv.coe_fn_mk]
  ext
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® a, ha, rfl ‚ü©, rfl‚ü©
    exact ‚ü® a, ha, rfl ‚ü©
  ¬∑ -- 2.
    rintro ‚ü®a, ha, rfl‚ü©
    exact ‚ü® Œª x => a (œÉ_d2 x), ‚ü® a, ha, rfl ‚ü©, rfl ‚ü©
  done
  
lemma Blindconjugate.closed_under_inv {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) :
  Function.RightInverse (@Blindconjugate n _ œÉ_d) (@Blindconjugate n _ œÉ_d.symm) := by
  unfold Blindconjugate Function.RightInverse Function.LeftInverse
  simp only [Set.mem_setOf_eq, Equiv.invFun_as_coe, Equiv.toFun_as_coe, Equiv.coe_fn_mk, Function.comp]
  rintro A
  ext f
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® a, ha, rfl ‚ü©, rfl‚ü©
    simp only [Equiv.apply_symm_apply]
    exact ha
  ¬∑ -- 2.
    rintro ha
    exact ‚ü® Œª x => f (œÉ_d x), ‚ü® f, ha, rfl ‚ü©, by simp only [Equiv.apply_symm_apply] ‚ü©
  done


lemma Blindconjugate.closed_under_inv1 {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) :
  Function.LeftInverse (@Blindconjugate n _ œÉ_d) (@Blindconjugate n _ œÉ_d.symm) := by
  unfold Blindconjugate Function.LeftInverse
  simp only [Set.mem_setOf_eq, Equiv.invFun_as_coe, Equiv.toFun_as_coe, Equiv.coe_fn_mk, Function.comp]
  rintro A
  ext f
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® a, ha, rfl ‚ü©, rfl‚ü©
    simp only [Equiv.symm_apply_apply]
    exact ha
  ¬∑ -- 2.
    rintro ha
    exact ‚ü® Œª x => f (œÉ_d.symm x), ‚ü® f, ha, rfl ‚ü©, by simp only [Equiv.symm_apply_apply] ‚ü©
  done

class Conjugation (n d : Nat) extends Equiv (LatinHypercube n d) (LatinHypercube n d) where
  (conj : ‚àÉ œÉ_d : Fin d ‚âÉ Fin d, toEquiv.toFun = Œª A : (LatinHypercube n d) => 
    ‚ü® A.H0, Blindconjugate œÉ_d A.set, Blindconjugate.main_imp œÉ_d A.set A.prop ‚ü©)

@[ext]
theorem Conjugation.ext {n d : Nat} (T1 T2 : Conjugation n d) : 
  T1.toFun = T2.toFun ‚Üí T1 = T2 := by
  intro h
  have Conjugation.ext_equiv : T1.toEquiv = T2.toEquiv ‚Üí T1 = T2 := by
    rcases T1 with ‚ü® ‚ü® f, f1, tofunf, invfunf ‚ü©, conj1 ‚ü©
    rcases T2 with ‚ü® ‚ü® g, g1, tofung, invfung ‚ü©, conj2 ‚ü© 
    simp only [Equiv.mk.injEq, and_imp]
    rintro h1 h2
    congr
    done
  apply Conjugation.ext_equiv
  ext A
  rw [‚Üê Equiv.toFun_as_coe, ‚Üê Equiv.toFun_as_coe, h]

def Conjugation.id {n d : Nat} : Conjugation n d :=
  ‚ü® Equiv.refl (LatinHypercube n d), by use Equiv.refl (Fin d); unfold Blindconjugate; simp; rfl ‚ü©

def Conjugation.comp {n d : Nat} (T1 T2 : Conjugation n d) : Conjugation n d :=
  ‚ü® Equiv.trans T1.toEquiv T2.toEquiv,
    by
      rcases T1 with ‚ü® _, ‚ü® œÉ_d1, conj1 ‚ü© ‚ü©
      rcases T2 with ‚ü® _, ‚ü® œÉ_d2, conj2 ‚ü© ‚ü©
      simp only [Equiv.trans]
      use Equiv.trans œÉ_d2 œÉ_d1
      ext A
      rw [Equiv.toFun_as_coe] at conj1 conj2
      rw [conj1, conj2, LatinHypercube.mk.injEq, Function.comp_apply] ; clear conj1 conj2
      exact Blindconjugate.closed_under_comp œÉ_d2 œÉ_d1 A.set
      done
  ‚ü©

def Conjugation.inverse_map {n d : Nat} (T : Conjugation n d) : Conjugation n d :=
  ‚ü® T.toEquiv.symm, by
    rcases T with ‚ü® equiv, ‚ü® œÉ_d, conj ‚ü© ‚ü©
    use œÉ_d.symm
    ext A
    apply Equiv.injective equiv
    simp only [Equiv.invFun_as_coe, Equiv.toFun_as_coe_apply, Equiv.apply_symm_apply]
    rw [Equiv.toFun_as_coe] at conj
    rw [conj, LatinHypercube.mk.injEq]
    nth_rw 1 [‚Üê Blindconjugate.closed_under_inv1 œÉ_d A.set]
    done
  ‚ü©

theorem Conjugation.LeftInverse {n d : Nat} (T : Conjugation n d) : 
Conjugation.comp (Conjugation.inverse_map T) T = Conjugation.id := by
  unfold Conjugation.comp Conjugation.inverse_map Conjugation.id Equiv.trans Function.comp
  congr <;>
  simp only [Equiv.symm_symm, Equiv.apply_symm_apply] <;>
  rfl

instance Conjugation.Group {n d : Nat} : Group (Conjugation n d) := by
  refine'
  {
    mul := Œª T1 T2 : Conjugation n d => Conjugation.comp T1 T2
    one := Conjugation.id
    inv := Œª T : Conjugation n d => Conjugation.inverse_map T
    div := Œª T1 T2 : Conjugation n d => Conjugation.comp T1 (Conjugation.inverse_map T2)
    npow := @npowRec _ ‚ü®Conjugation.id‚ü© ‚ü®Œª T1 T2 => Conjugation.comp T1 T2‚ü©
    zpow := @zpowRec _ ‚ü®Conjugation.id‚ü© ‚ü®Œª T1 T2 => Conjugation.comp T1 T2‚ü© ‚ü®Conjugation.inverse_map‚ü©
    mul_left_inv := fun T => Conjugation.LeftInverse T
    .. } <;>
  intros <;>
  ext <;>
  rfl
  done

--------------------------------------------------------------------------

def Blindparatopism {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) 
    (A : Set (Fin d ‚Üí Fin n)) : 
  Set (Fin d ‚Üí Fin n) := Blindconjugate œÉ_d (Blindisotopism œÉ‚Çôd A)

lemma Blindparatopism.main_imp {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) 
(A : Set (Fin d ‚Üí Fin n)) :
  is_LatinHypercube A ‚Üí is_LatinHypercube (Blindparatopism œÉ_d œÉ‚Çôd A) := by
  intro HA
  apply Blindconjugate.main_imp œÉ_d (Blindisotopism œÉ‚Çôd A)
  exact Blindisotopism.main_imp œÉ‚Çôd A HA

theorem Blindparatopism.main {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) 
(A : Set (Fin d ‚Üí Fin n)) :
  is_LatinHypercube A ‚Üî is_LatinHypercube (Blindparatopism œÉ_d œÉ‚Çôd A) := by
  rw [Blindisotopism.main œÉ‚Çôd, Blindconjugate.main œÉ_d (Blindisotopism œÉ‚Çôd A)]
  rfl
  done

lemma Blindparatopism.closed_under_comp {n d : Nat} (œÉ_d1 œÉ_d2 : Fin d ‚âÉ Fin d) (œÉ‚Çôd1 œÉ‚Çôd2 : 
  Fin d ‚Üí Fin n ‚âÉ Fin n) (A : Set (Fin d ‚Üí Fin n) ) :
  Blindparatopism œÉ_d1 œÉ‚Çôd1 (Blindparatopism œÉ_d2 œÉ‚Çôd2 A) = 
  Blindparatopism (Equiv.trans œÉ_d1 œÉ_d2) (Œª x => Equiv.trans (œÉ‚Çôd2 x) (œÉ‚Çôd1 (œÉ_d2.symm x))) A := by
  unfold Blindparatopism Blindconjugate Blindisotopism
  simp only [Set.mem_setOf_eq, Equiv.trans_apply, Equiv.coe_trans]
  ext a
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® _, ‚ü® _, ‚ü® a, ha, rfl ‚ü©, rfl ‚ü©, rfl ‚ü©, rfl‚ü©
    simp [Function.comp]
    refine ‚ü® fun x => (œÉ‚Çôd1 (œÉ_d2.symm x)) ((œÉ‚Çôd2 x) (a x)), ?_, by simp only [Equiv.symm_apply_apply] ‚ü©
    exact ‚ü® a, ha, rfl ‚ü©
  ¬∑ -- 2.
    rintro ‚ü®_, ‚ü®a, ha, rfl‚ü©, rfl‚ü©
    simp only [Set.mem_setOf_eq]
    refine ‚ü® _, ‚ü® _, ‚ü® _, ‚ü® a, ha, rfl ‚ü©, rfl ‚ü©, rfl ‚ü©, ?_ ‚ü©
    ext x
    simp only [Function.comp_apply, Equiv.symm_apply_apply]
  done

lemma Blindparatopism.closed_under_inv {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) :
  Function.RightInverse (Blindparatopism œÉ_d œÉ‚Çôd) (Blindparatopism œÉ_d.symm (Œª x => (œÉ‚Çôd (œÉ_d x)).symm)) := by
  unfold Blindparatopism Blindconjugate Blindisotopism Function.RightInverse Function.LeftInverse
  simp only [Set.mem_setOf_eq, Equiv.invFun_as_coe, Equiv.toFun_as_coe, Equiv.coe_fn_mk, Function.comp]
  rintro A
  ext f
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® _, ‚ü® _, ‚ü® a, ha, rfl ‚ü©, rfl ‚ü©, rfl ‚ü©, rfl‚ü©
    simp only [Equiv.apply_symm_apply, Equiv.symm_apply_apply]
    exact ha
  ¬∑ -- 2.
    rintro ha
    refine ‚ü® _, ‚ü® _, ‚ü® _, ‚ü® _, ha, rfl ‚ü©, rfl ‚ü©, rfl ‚ü©, 
      by simp only [Equiv.apply_symm_apply, Equiv.symm_apply_apply] ‚ü©
  done

lemma Blindparatopism.closed_under_inv1 {n d : Nat} (œÉ_d : Fin d ‚âÉ Fin d) (œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n) :
  Function.LeftInverse (Blindparatopism œÉ_d œÉ‚Çôd) (Blindparatopism œÉ_d.symm (Œª x => (œÉ‚Çôd (œÉ_d x)).symm)) := by
  unfold Blindparatopism Blindconjugate Blindisotopism Function.LeftInverse
  simp only [Set.mem_setOf_eq, Equiv.invFun_as_coe, Equiv.toFun_as_coe, Equiv.coe_fn_mk, Function.comp]
  rintro A
  ext f
  constructor
  ¬∑ -- 1.
    rintro ‚ü®_, ‚ü® _, ‚ü® _, ‚ü® a, ha, rfl ‚ü©, rfl ‚ü©, rfl ‚ü©, rfl‚ü©
    simp only [Equiv.symm_apply_apply, Equiv.apply_symm_apply]
    exact ha
  ¬∑ -- 2.
    rintro ha
    refine ‚ü® _, ‚ü® _, ‚ü® _, ‚ü® _, ha, rfl ‚ü©, rfl ‚ü©, rfl ‚ü©, 
      by simp only [Equiv.symm_apply_apply, Equiv.apply_symm_apply] ‚ü©
  done

class Paratopism (n d : Nat) extends Equiv (LatinHypercube n d) (LatinHypercube n d) where
  (para : ‚àÉ œÉ_d : Fin d ‚âÉ Fin d, ‚àÉ œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n, toEquiv.toFun = Œª A => 
  ‚ü® A.H0, Blindparatopism œÉ_d œÉ‚Çôd A.set, Blindparatopism.main_imp œÉ_d œÉ‚Çôd A.set A.prop ‚ü©)

@[ext]
theorem Paratopism.ext {n d : Nat} (T1 T2 : Paratopism n d) : 
  T1.toFun = T2.toFun ‚Üí T1 = T2 := by
  intro h
  have Paratopism.ext_equiv : T1.toEquiv = T2.toEquiv ‚Üí T1 = T2 := by
    rcases T1 with ‚ü® ‚ü® f, f1, tofunf, invfunf ‚ü©, para1 ‚ü©
    rcases T2 with ‚ü® ‚ü® g, g1, tofung, invfung ‚ü©, para2 ‚ü© 
    simp only [Equiv.mk.injEq, and_imp]
    rintro h1 h2
    congr
    done
  apply Paratopism.ext_equiv
  ext A
  rw [‚Üê Equiv.toFun_as_coe, ‚Üê Equiv.toFun_as_coe, h]

def Paratopism.id {n d : Nat} : Paratopism n d :=
  ‚ü® Equiv.refl (LatinHypercube n d), by 
    use Equiv.refl (Fin d)
    use fun _ => Equiv.refl (Fin n)
    unfold Blindparatopism Blindconjugate Blindisotopism
    simp only [Equiv.toFun_as_coe, Equiv.coe_refl, Equiv.refl_apply, exists_eq_right', Set.setOf_mem_eq,
      Function.comp.right_id]
    rfl 
  ‚ü©

def Paratopism.comp {n d : Nat} (T1 T2 : Paratopism n d) : Paratopism n d :=
  ‚ü® Equiv.trans T1.toEquiv T2.toEquiv,
    by 
      rcases T1 with ‚ü® equiv1, ‚ü® œÉ_d1, œÉ‚Çôd1, iso1 ‚ü© ‚ü©
      rcases T2 with ‚ü® equiv2, ‚ü® œÉ_d2, œÉ‚Çôd2, iso2 ‚ü© ‚ü©
      simp only [Equiv.trans]
      use (Equiv.trans œÉ_d2 œÉ_d1) 
      use Œª x => Equiv.trans (œÉ‚Çôd1 x) (œÉ‚Çôd2 (œÉ_d1.symm x))
      ext A
      rw [Equiv.toFun_as_coe] at iso1 iso2
      rw [iso1, iso2, LatinHypercube.mk.injEq, Function.comp_apply] ; clear iso1 iso2
      simp only
      rw [Blindparatopism.closed_under_comp œÉ_d2 œÉ_d1 œÉ‚Çôd2 œÉ‚Çôd1 A.set]
      done
  ‚ü©

def Paratopism.inverse_map {n d : Nat} (T : Paratopism n d) : Paratopism n d :=
  ‚ü® T.toEquiv.symm, by
    rcases T with ‚ü® equiv, ‚ü® œÉ_d, œÉ‚Çôd, para ‚ü© ‚ü©
    use œÉ_d.symm
    use Œª x => (œÉ‚Çôd (œÉ_d x)).symm
    ext A
    apply Equiv.injective equiv
    simp only [Equiv.invFun_as_coe, Equiv.toFun_as_coe_apply, Equiv.apply_symm_apply]
    rw [Equiv.toFun_as_coe] at para
    rw [para, LatinHypercube.mk.injEq]
    nth_rw 1 [‚Üê Blindparatopism.closed_under_inv1 œÉ_d œÉ‚Çôd A.set]
    done
  ‚ü©

theorem Paratopism.LeftInverse {n d : Nat} (T : Paratopism n d) :
Paratopism.comp (Paratopism.inverse_map T) T = Paratopism.id := by
  unfold Paratopism.comp Paratopism.inverse_map Paratopism.id Equiv.trans Function.comp
  congr <;>
  simp only [Equiv.symm_symm, Equiv.apply_symm_apply] <;>
  rfl

instance Paratopism.Group {n d : Nat} : Group (Paratopism n d) := by
  refine'
  {
    mul := Œª T1 T2 : Paratopism n d => Paratopism.comp T1 T2
    one := Paratopism.id
    inv := Œª T : Paratopism n d => Paratopism.inverse_map T
    div := Œª T1 T2 : Paratopism n d => Paratopism.comp T1 (Paratopism.inverse_map T2)
    npow := @npowRec _ ‚ü®Paratopism.id‚ü© ‚ü®Œª T1 T2 => Paratopism.comp T1 T2‚ü©
    zpow := @zpowRec _ ‚ü®Paratopism.id‚ü© ‚ü®Œª T1 T2 => Paratopism.comp T1 T2‚ü© ‚ü®Paratopism.inverse_map‚ü©
    mul_left_inv := fun T => Paratopism.LeftInverse T
    .. } <;>
  intros <;>
  ext <;>
  rfl
  done

--------------------------------------------------------------------------

/-
"The stabilisers of a latin hypercube L under isotopism, paratopism and isomorphism
are known respectively as the autotopism group, autoparatopism group and automorphism
group of L. We use respectively Is(L), Par(L) and Aut(L) to denote these groups. For
example, Aut(L) = {œÉ ‚àà ‚àÜd+1n | LœÉ = L}."
-/

-- Quotienting by the equivalence relation

def Isotopism.Relation {n d : Nat} : LatinHypercube n d ‚Üí LatinHypercube n d ‚Üí Prop := 
  Œª A B => ‚àÉ T : Isotopism n d, T.toFun A = B

lemma Isotopism.Relation.refl {n d : Nat} : Reflexive (@Isotopism.Relation n d) := 
  fun _ => ‚ü® Isotopism.id, rfl ‚ü©

lemma Isotopism.Relation.symm {n d : Nat} : ‚àÄ {x y : LatinHypercube n d}, 
  Isotopism.Relation x y ‚Üí Isotopism.Relation y x  := by
  rintro A B ‚ü®T, rfl‚ü©
  use T‚Åª¬π
  have := Isotopism.LeftInverse T
  rw [Isotopism.ext_iff] at this
  rw [‚Üê this]
  rw [Isotopism.LeftInverse T]
  done

lemma Isotopism.Relation.trans {n d : Nat} : ‚àÄ {x y z : Set (Fin d ‚Üí Fin n)}, 
  Isotopism.Relation x y ‚Üí Isotopism.Relation y z ‚Üí Isotopism.Relation x z := by
  rintro A B C ‚ü®œÉ‚Çôd, rfl‚ü© ‚ü®œÑ‚Çôd, rfl‚ü©
  use Œª x => Equiv.trans (œÉ‚Çôd x) (œÑ‚Çôd x)
  ext f
  constructor <;> 
  simp only [isotopism, Equiv.trans_apply, Set.mem_setOf_eq, forall_exists_index, and_imp]
  ¬∑ -- 1.
    rintro a1 ha1 rfl
    use fun x => (œÉ‚Çôd x) (a1 x)
    exact ‚ü® ‚ü® a1, ha1, rfl ‚ü©, rfl ‚ü©
  ¬∑ -- 2.
    rintro _ a ha rfl rfl
    refine ‚ü® a, ha, rfl ‚ü©
    done
  done

def Isotopism.Relation.setoid {n d : Nat} : Setoid (Set (Fin d ‚Üí Fin n)) :=
‚ü® 
  Isotopism.Relation, 
  ‚ü® Isotopism.Relation.refl, Isotopism.Relation.symm, Isotopism.Relation.trans ‚ü©
‚ü©

def isotopism.class (n d : Nat) := 
  Quotient (Isotopism.Relation.setoid : Setoid (Set (Fin d ‚Üí Fin n)))


def conjugate.relation {n d : Nat} : Set (Fin d ‚Üí Fin n) ‚Üí 
  Set (Fin d ‚Üí Fin n) ‚Üí Prop := 
  Œª A B => ‚àÉ œÉ_d : Fin d ‚âÉ Fin d, conjugate œÉ_d A = B

lemma conjugate.relation.refl {n d : Nat} : Reflexive (@conjugate.relation n d) := by
  rintro A
  use Equiv.refl (Fin d)
  simp only [conjugate, Equiv.coe_refl, Function.comp.right_id, exists_eq_right', Set.setOf_mem_eq]
  done

lemma conjugate.relation.symm {n d : Nat} : ‚àÄ {x y : Set (Fin d ‚Üí Fin n)}, 
  conjugate.relation x y ‚Üí conjugate.relation y x  := by
  rintro A B ‚ü®œÉ_d, rfl‚ü©
  use œÉ_d.symm
  apply conjugate.left_inverse
  done

lemma conjugate.relation.trans {n d : Nat} : ‚àÄ {x y z : Set (Fin d ‚Üí Fin n)},
  conjugate.relation x y ‚Üí conjugate.relation y z ‚Üí conjugate.relation x z := by
  rintro A B C ‚ü®œÉ_d, rfl‚ü© ‚ü®œÑ_d, rfl‚ü©
  use Equiv.trans œÑ_d œÉ_d 
  ext f
  constructor <;>
  simp
  ¬∑ -- 1.
    rintro ‚ü® a, ha, rfl ‚ü©
    use a ‚àò œÉ_d
    constructor
    ¬∑ exact ‚ü® a, ha, rfl ‚ü©
    ¬∑ ext x ; simp
  ¬∑ -- 2.
    rintro ‚ü® _, ‚ü® a, ha, rfl ‚ü©, rfl ‚ü©
    exact ‚ü® a, ha, rfl ‚ü©
  done

def conjugate.relation.setoid {n d : Nat} : Setoid (Set (Fin d ‚Üí Fin n)) :=
‚ü® 
  conjugate.relation,
  ‚ü® conjugate.relation.refl, conjugate.relation.symm, conjugate.relation.trans ‚ü©
‚ü©

def conjugate.class (n d : Nat) := 
  Quotient (conjugate.relation.setoid : Setoid (Set (Fin d ‚Üí Fin n)))


def paratopism.relation {n d : Nat} : Set (Fin d ‚Üí Fin n) ‚Üí
  Set (Fin d ‚Üí Fin n) ‚Üí Prop := 
  Œª A B => ‚àÉ œÉ_d : Fin d ‚âÉ Fin d, ‚àÉ œÉ‚Çôd : Fin d ‚Üí Fin n ‚âÉ Fin n, 
    paratopism œÉ_d œÉ‚Çôd A = B
  
lemma paratopism.relation.refl {n d : Nat} : Reflexive (@paratopism.relation n d) := by
  rintro A
  use Equiv.refl (Fin d)
  use Œª _ => Equiv.refl (Fin n)
  simp only [paratopism, conjugate, isotopism, Equiv.refl_apply, exists_eq_right', Set.setOf_mem_eq, Equiv.coe_refl,
    Function.comp.right_id]
  done

lemma paratopism.relation.symm {n d : Nat} : ‚àÄ {x y : Set (Fin d ‚Üí Fin n)},
  paratopism.relation x y ‚Üí paratopism.relation y x  := by
  rintro A B ‚ü®œÉ_d, ‚ü®œÉ‚Çôd, rfl‚ü©‚ü©
  use œÉ_d
  use Œª x => (œÉ‚Çôd (œÉ_d x))
  nth_rw 2 [‚Üê paratopism.left_inverse œÉ_d œÉ‚Çôd A]
  ext f
  constructor <;>
  simp only [paratopism, conjugate, isotopism, Set.mem_setOf_eq, inverse_map, isotopism.inverse_map,
    conjugate.inverse_map, forall_exists_index, and_imp]
  ¬∑ -- 1.
    rintro a1 a2 a3 a4 ha4 ha3 ha2 rfl hf 
    use fun x => (œÉ‚Çôd x) (f x)
    refine ‚ü® ?_, by simp ‚ü©
    use fun x => (œÉ‚Çôd (œÉ_d x)) (f (œÉ_d x))
    refine ‚ü® ?_, by ext x; simp ‚ü©
    use fun x => (œÉ‚Çôd x) (f x)
    refine ‚ü® ?_, by ext x; simp ‚ü©
    use a4
    refine ‚ü® ha4, ?_ ‚ü©
    

    rintro _ _ _ a hx rfl rfl rfl rfl
    use a
    constructor
    ¬∑ -- 1.
      refine ‚ü® a ‚àò ‚ÜëœÉ_d, ?_, by simp ‚ü©
      refine ‚ü® a, ?_, rfl ‚ü©
      
      done
    ¬∑ -- 2.
      simp
      
      done
    done
  done

